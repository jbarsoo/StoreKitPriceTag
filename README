The Apple App Store allows customers to purchase App content from within the App itself.  
SKPTBuyButton extends a UISegmentedControl to make it behave like a dynamic price tag.  
With it you can display the LIVE price of your App from within your App.

What good is this?
Apple allows developers to make up-to-the-minute (and scheduled) price changes to
in-app purchasable content.  Customers will not know of these changes unless they
attempt an in-app purchase.  StoreKitPriceTag shows the up-to-date price.

Implementation:
Include the files in your App,
Add the appropriate code to record customer purchases and to implement purchased content,
Replace the https://URL with that of your product server.
Your product server should return the Apple Product Identifier that Apple has approved
for use as an in-app purchase identifier.

Managed Object Context:
SKPTBuyButton expects a pre-existing NSManagedObjectContext object (see Apple's CoreData documentation)

Do I really need to use an external server to deliver my Apple Product Identifier?
You could just set prodIdent to an Apple approved product identifier and deactivate the calls
to an external server (and the parser).  Keep in mind that your Apple Product Identifier string would
be visible to anyone who might run `strings` against your binary.

I recommend implementing the product server.
For example, if you want to forbid a particular in-app purchase (i.e. you found a critical bug
in the purchased version) you could alter your server to NOT send the Apple Product Identifier
string (which would disallow the purchase) until your bug-fixed version is released.
